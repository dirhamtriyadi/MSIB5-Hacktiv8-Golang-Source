package main

import "errors"

type User struct {
	ID    uint
	Name  string
	Email string
}

func (u *User) IsValidEmail(email string) error {
	if len(email) < 10 {
		return errors.New("invalid email")
	}

	u.Email = email

	return nil
}

type UserUsercase interface {
	GetUser(id uint) (*User, error)
}

type UserRepo interface {
	GetUserFromDB(id uint) (*User, error)
}

type userUsecase struct {
	userRepo UserRepo
}

func (us *userUsecase) GetUser(id uint) (*User, error) {
	user, err := us.userRepo.GetUserFromDB(id)

	if err != nil {
		return nil, err
	}

	return user, nil
}

type userRepo struct{}

var users []User = []User{
	{
		ID:   1,
		Name: "Anton",
	},
	{
		ID:   2,
		Name: "Lala",
	},
}

func (ur *userRepo) GetUserFromDB(id uint) (*User, error) {

	for _, user := range users {
		if user.ID == id {
			return &user, nil
		}
	}

	return nil, errors.New("user not found")
}

func main() {

}
